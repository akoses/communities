datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") 
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  opportunities Opportunities[]
  events Events[]
  resources Resources[]
  colleges Colleges[]
  joined Joined[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Colleges {
	id Int @id @default(autoincrement())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	name String
	description String
	logo String
	banner String
	events Events[]
	opportunities Opportunities[]
	resources Resources[]
	userId String
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
	joined Joined[]
}

model Events {
	id Int @id @default(autoincrement())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	name String
	organization String
	description String
	orgLogo String
	eventLink String
	location String
	startDate DateTime
	endDate DateTime
	collegeId Int
	userId String
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
	college Colleges @relation(fields: [collegeId], references: [id], onDelete: Cascade)
}

model Opportunities {
	id Int @id @default(autoincrement())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	name String
	description String
	location String
	organization String
	disciplines String
	workstyle String
	collegeId Int
	applyLink String
	orgLogo String
	userId String
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
	college Colleges @relation(fields: [collegeId], references: [id], onDelete: Cascade)
}

model Resources {
	id Int @id @default(autoincrement())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	customTitle String
	customDescription String
	url String
	collegeId Int
	userId String 
	image String @default("")
	hostname String @default("")
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
	college Colleges @relation(fields: [collegeId], references: [id], onDelete: Cascade)
}

model Joined {
	id Int @id @default(autoincrement())
	createdAt DateTime @default(now())
	userId String
	collegeId Int
	emailNotification Boolean @default(true)
	college Colleges @relation(fields: [collegeId], references: [id], onDelete: Cascade)
	user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}